# Generated by Django 4.0.2 on 2022-03-19 10:40

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MetaboliteInf',
            fields=[
                ('metabolite', models.TextField(blank=True, db_column='Metabolite', null=True)),
                ('metabolite_name', models.TextField(blank=True, db_column='metabolite name', null=True)),
                ('metabolite_paper_field', models.TextField(blank=True, db_column='metabolite (paper)', null=True)),
                ('field_metabolite_name_field', models.TextField(blank=True, db_column='(metabolite name)', null=True)),
                ('adduct', models.TextField(blank=True, null=True)),
                ('pubchem_id', models.TextField(blank=True, db_column='PUBCHEM ID', null=True)),
                ('hmdb_id', models.TextField(blank=True, db_column='HMDB ID', null=True)),
                ('average_molecular_weight', models.TextField(blank=True, db_column='Average Molecular Weight', null=True)),
                ('monisotopic_molecular_weight', models.TextField(blank=True, db_column='Monisotopic Molecular Weight', null=True)),
                ('kegg', models.TextField(blank=True, db_column='KEGG', null=True)),
                ('pathway', models.TextField(blank=True, db_column='Pathway', null=True)),
                ('sub_pathway', models.TextField(blank=True, db_column='sub-pathway', null=True)),
                ('m_z', models.TextField(blank=True, db_column='M/Z', null=True)),
                ('specimen', models.TextField(blank=True, db_column='Specimen', null=True)),
                ('function', models.TextField(blank=True, null=True)),
                ('participantsn_cancer_type_field', models.TextField(blank=True, db_column='participantsn(cancer type)', null=True)),
                ('stage', models.TextField(blank=True, null=True)),
                ('number', models.IntegerField(blank=True, null=True)),
                ('gender_m_text_f_field', models.TextField(blank=True, db_column='gender (M TEXT, F)', null=True)),
                ('age_mean_range_m_f_field', models.TextField(blank=True, db_column='age mean(range) (M / F)', null=True)),
                ('smoking_status', models.TextField(blank=True, db_column='smoking status', null=True)),
                ('participantsn_control_field', models.TextField(blank=True, db_column='participantsn(control)', null=True)),
                ('number_1', models.IntegerField(blank=True, db_column='number.1', null=True)),
                ('gender_m_f_field', models.TextField(blank=True, db_column='gender (M / F)', null=True)),
                ('age_mean_range_m_f_field_0', models.TextField(blank=True, db_column='age mean(range) (M / F).', null=True)),
                ('smoking_status_1', models.TextField(blank=True, db_column='smoking status.1', null=True)),
                ('chromatography', models.TextField(blank=True, db_column='Chromatography', null=True)),
                ('ion_source', models.TextField(blank=True, db_column='Ion source', null=True)),
                ('positive_negative_mode', models.TextField(blank=True, db_column='Positive/Negative mode', null=True)),
                ('mass_analyzer', models.TextField(blank=True, db_column='Mass analyzer', null=True)),
                ('identification_level', models.TextField(blank=True, db_column='Identification level', null=True)),
                ('data_processing_software', models.TextField(blank=True, db_column='Data processing software', null=True)),
                ('database_search', models.TextField(blank=True, db_column='Database search', null=True)),
                ('statistical_software', models.TextField(blank=True, db_column='statistical software', null=True)),
                ('statistical_difference_method', models.TextField(blank=True, db_column='statistical difference method', null=True)),
                ('mean_concentration_case_field', models.TextField(blank=True, db_column='mean concentration (case)', null=True)),
                ('mean_concentration_control_field', models.TextField(blank=True, db_column='mean  concentration (control)', null=True)),
                ('fold_change_n_case_control_field', models.TextField(blank=True, db_column='fold change n(case/ control)', null=True)),
                ('raw_p_value', models.TextField(blank=True, db_column='RAW p-value', null=True)),
                ('fdr', models.TextField(blank=True, db_column='FDR', null=True)),
                ('vip', models.TextField(blank=True, db_column='VIP', null=True)),
                ('classification_method', models.TextField(blank=True, db_column='Classification method', null=True)),
                ('cutoff_value', models.TextField(blank=True, db_column='Cutoff value', null=True)),
                ('auroc_95_ci_field', models.TextField(blank=True, db_column='AUROC (95%CI)', null=True)),
                ('sensitivity_field', models.TextField(blank=True, db_column='Sensitivity (%)', null=True)),
                ('specificity_field', models.TextField(blank=True, db_column='Specificity (%)', null=True)),
                ('accuracy_field', models.TextField(blank=True, db_column='Accuracy (%)', null=True)),
                ('survival_analysis_method', models.TextField(blank=True, db_column='Survival analysis method', null=True)),
                ('time_cut_offs_field', models.TextField(blank=True, db_column='time cut-offs (<=/>)', null=True)),
                ('hr_95_ci_field', models.TextField(blank=True, db_column='HR (95%CI)', null=True)),
                ('p_value', models.TextField(blank=True, db_column='p-value', null=True)),
                ('fdr_1', models.TextField(blank=True, db_column='FDR.1', null=True)),
                ('country', models.TextField(blank=True, db_column='Country', null=True)),
                ('author_emphasized_biomarkers', models.TextField(blank=True, db_column='author-emphasized biomarkers', null=True)),
                ('other_information', models.TextField(blank=True, db_column='other information', null=True)),
                ('pubmed_id', models.IntegerField(blank=True, db_column='Pubmed ID', null=True)),
                ('authors', models.TextField(blank=True, db_column='Authors', null=True)),
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'metabolite_inf',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PaperInf',
            fields=[
                ('country', models.TextField(blank=True, null=True)),
                ('pubmed_id', models.IntegerField(blank=True, db_column='Pubmed ID', null=True)),
                ('authors', models.TextField(blank=True, null=True)),
                ('comparative_study', models.TextField(blank=True, db_column='Comparative study', null=True)),
                ('participants_cancer_control_field', models.TextField(blank=True, db_column='participants (Cancer/ Control)', null=True)),
                ('material_source_field', models.TextField(blank=True, db_column='material (source)', null=True)),
                ('function', models.TextField(blank=True, null=True)),
                ('participants_cancer_type_field', models.TextField(blank=True, db_column='Participants (cancer type)', null=True)),
                ('stage', models.TextField(blank=True, null=True)),
                ('number', models.IntegerField(blank=True, null=True)),
                ('gender_m_f_field', models.TextField(blank=True, db_column='gender (M / F)', null=True)),
                ('age_mean_range_m_f_field', models.TextField(blank=True, db_column='age mean (range) (M / F)', null=True)),
                ('smoking_status', models.TextField(blank=True, db_column='smoking status', null=True)),
                ('participants_control_field', models.TextField(blank=True, db_column='Participants (control)', null=True)),
                ('number_1', models.IntegerField(blank=True, db_column='number.1', null=True)),
                ('gender_m_f_1', models.TextField(blank=True, db_column='gender (M / F).1', null=True)),
                ('age_mean_range_m_f_field_0', models.TextField(blank=True, db_column='age mean (range) (M / F).', null=True)),
                ('smoking_status_1', models.TextField(blank=True, db_column='smoking status.1', null=True)),
                ('chromatography', models.TextField(blank=True, null=True)),
                ('ion_source', models.TextField(blank=True, db_column='ion source', null=True)),
                ('positive_negative_mode', models.TextField(blank=True, db_column='positive/ negative mode', null=True)),
                ('mass_analyzer', models.TextField(blank=True, db_column='mass analyzer', null=True)),
                ('identification_level', models.TextField(blank=True, db_column='Identification level', null=True)),
                ('data_processing_software', models.TextField(blank=True, db_column='data processing software', null=True)),
                ('database_search', models.TextField(blank=True, db_column='database search', null=True)),
                ('statistical_difference_method', models.TextField(blank=True, db_column='statistical difference method', null=True)),
                ('classification_method', models.TextField(blank=True, db_column='classification method', null=True)),
                ('survival_analysis_method', models.TextField(blank=True, db_column='survival analysis method', null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('id', models.IntegerField(blank=True, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'paper_inf',
                'managed': False,
            },
        ),
    ]
